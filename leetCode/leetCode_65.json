[
    {
        "problemsName": " 3201.找出有效子序列的最大长度 I",
        "hardRate": "MEDIUM",
        "passRate": "41.73%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-i/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-i/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code>。</p>\n\n<p><code>nums</code> 的子序列 <code>sub</code> 的长度为 <code>x</code> ，如果其满足以下条件，则称其为 <strong>有效子序列</strong>：</p>\n\n<ul>\n\t<li><code>(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2</code></li>\n</ul>\n\n<p>返回 <code>nums</code> 的 <strong>最长的有效子序列</strong> 的长度。</p>\n\n<p>一个&nbsp;<strong>子序列</strong>&nbsp;指的是从原数组中删除一些元素（也可以不删除任何元素），剩余元素保持原来顺序组成的新数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1,2,3,4]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>最长的有效子序列是 <code>[1, 2, 3, 4]</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1,2,1,1,2,1,2]</span></p>\n\n<p><strong>输出：</strong> 6</p>\n\n<p><strong>解释：</strong></p>\n\n<p>最长的有效子序列是 <code>[1, 2, 1, 2, 1, 2]</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1,3]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>最长的有效子序列是 <code>[1, 3]</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3202.找出有效子序列的最大长度 II",
        "hardRate": "MEDIUM",
        "passRate": "49.36%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-ii/solution",
        "problemsDesc": "给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个 <strong>正</strong>&nbsp;整数&nbsp;<code>k</code>&nbsp;。\n<p><code>nums</code>&nbsp;的一个&nbsp;<span data-keyword=\"subsequence-array\">子序列</span> <code>sub</code>&nbsp;的长度为 <code>x</code>&nbsp;，如果其满足以下条件，则称其为 <strong>有效子序列</strong>&nbsp;：</p>\n\n<ul>\n\t<li><code>(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k</code></li>\n</ul>\n返回 <code>nums</code>&nbsp;的 <strong>最长</strong><strong>有效子序列</strong>&nbsp;的长度。\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,2,3,4,5], k = 2</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>5</span></p>\n\n<p><b>解释：</b></p>\n\n<p>最长有效子序列是&nbsp;<code>[1, 2, 3, 4, 5]</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,4,2,3,1,4], k = 3</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>4</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>最长有效子序列是&nbsp;<code>[1, 4, 1, 4]</code>&nbsp;。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3203.合并两棵树后的最小直径",
        "hardRate": "HARD",
        "passRate": "34.73%",
        "problemsUrl": "https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/",
        "solutionsUrl": "https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/solution",
        "problemsDesc": "<p>给你两棵 <strong>无向</strong>&nbsp;树，分别有&nbsp;<code>n</code> 和&nbsp;<code>m</code>&nbsp;个节点，节点编号分别为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;和&nbsp;<code>0</code>&nbsp;到&nbsp;<code>m - 1</code>&nbsp;。给你两个二维整数数组&nbsp;<code>edges1</code> 和&nbsp;<code>edges2</code>&nbsp;，长度分别为&nbsp;<code>n - 1</code> 和&nbsp;<code>m - 1</code>&nbsp;，其中&nbsp;<code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示在第一棵树中节点&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code>&nbsp;之间有一条边，<code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示在第二棵树中节点&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code>&nbsp;之间有一条边。</p>\n\n<p>你必须在第一棵树和第二棵树中分别选一个节点，并用一条边连接它们。</p>\n\n<p>请你返回添加边后得到的树中，<strong>最小直径</strong>&nbsp;为多少。</p>\n\n<p>一棵树的 <strong>直径</strong>&nbsp;指的是树中任意两个节点之间的最长路径长度。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png\" style=\"width: 1000px; height: 494px;\" /></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>将第一棵树中的节点 0 与第二棵树中的任意节点连接，得到一棵直径为 3 的树。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example211.png\" style=\"width: 1000px; height: 492px;\" /></strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>5</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>将第一棵树中的节点 0 和第二棵树中的节点 0 连接，可以得到一棵直径为 5 的树。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges1.length == n - 1</code></li>\n\t<li><code>edges2.length == m - 1</code></li>\n\t<li><code>edges1[i].length == edges2[i].length == 2</code></li>\n\t<li><code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; m</code></li>\n\t<li>输入保证&nbsp;<code>edges1</code> 和&nbsp;<code>edges2</code>&nbsp;分别表示一棵合法的树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3204.按位用户权限分析",
        "hardRate": "MEDIUM",
        "passRate": "94.08%",
        "problemsUrl": "https://leetcode.cn/problems/bitwise-user-permissions-analysis/",
        "solutionsUrl": "https://leetcode.cn/problems/bitwise-user-permissions-analysis/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3205.最大数组跳跃得分 I",
        "hardRate": "MEDIUM",
        "passRate": "83.52%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-array-hopping-score-i/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-array-hopping-score-i/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3206.交替组 I",
        "hardRate": "EASY",
        "passRate": "80.63%",
        "problemsUrl": "https://leetcode.cn/problems/alternating-groups-i/",
        "solutionsUrl": "https://leetcode.cn/problems/alternating-groups-i/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>colors</code>&nbsp;，它表示一个由红色和蓝色瓷砖组成的环，第 <code>i</code>&nbsp;块瓷砖的颜色为&nbsp;<code>colors[i]</code>&nbsp;：</p>\n\n<ul>\n\t<li><code>colors[i] == 0</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;块瓷砖的颜色是 <strong>红色</strong>&nbsp;。</li>\n\t<li><code>colors[i] == 1</code>&nbsp;表示第 <code>i</code>&nbsp;块瓷砖的颜色是 <strong>蓝色</strong>&nbsp;。</li>\n</ul>\n\n<p>环中连续 3 块瓷砖的颜色如果是 <strong>交替</strong>&nbsp;颜色（也就是说中间瓷砖的颜色与它<strong>&nbsp;左边</strong>&nbsp;和 <strong>右边</strong>&nbsp;的颜色都不同），那么它被称为一个 <strong>交替</strong>&nbsp;组。</p>\n\n<p>请你返回 <strong>交替</strong>&nbsp;组的数目。</p>\n\n<p><b>注意</b>&nbsp;，由于&nbsp;<code>colors</code>&nbsp;表示一个 <strong>环</strong>&nbsp;，<strong>第一块</strong>&nbsp;瓷砖和 <strong>最后一块</strong>&nbsp;瓷砖是相邻的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>colors = [1,1,1]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-53-171.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>colors = [0,1,0,0,1]</span></p>\n\n<p><b>输出：</b>3</p>\n\n<p><b>解释：</b></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-47-491.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>交替组包括：</p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-50-441.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-48-211.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-49-351.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= colors.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3207.与敌人战斗后的最大分数",
        "hardRate": "MEDIUM",
        "passRate": "37.30%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-points-after-enemy-battles/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-points-after-enemy-battles/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>enemyEnergies</code>&nbsp;，它表示一个下标从 <strong>0</strong>&nbsp;开始的敌人能量数组。</p>\n\n<p>同时给你一个整数&nbsp;<code>currentEnergy</code>&nbsp;，它表示你一开始拥有的能量值总量。</p>\n\n<p>你一开始的分数为&nbsp;<code>0</code>&nbsp;，且一开始所有的敌人都未标记。</p>\n\n<p>你可以通过以下操作 <b>之一</b>&nbsp;<strong>任意次</strong>（也可以&nbsp;<strong>0</strong>&nbsp;次）来得分：</p>\n\n<ul>\n\t<li>选择一个 <strong>未标记</strong>&nbsp;且满足&nbsp;<code>currentEnergy &gt;= enemyEnergies[i]</code>&nbsp;的敌人&nbsp;<code>i</code>&nbsp;。在这个操作中：\n\n\t<ul>\n\t\t<li>你会获得 <code>1</code>&nbsp;分。</li>\n\t\t<li>你的能量值减少&nbsp;<code>enemyEnergies[i]</code>&nbsp;，也就是说&nbsp;<code>currentEnergy = currentEnergy - enemyEnergies[i]</code>&nbsp;。</li>\n\t</ul>\n\t</li>\n\t<li>如果你目前&nbsp;<strong>至少</strong>&nbsp;有 <code>1</code>&nbsp;分，你可以选择一个&nbsp;<strong>未标记</strong>&nbsp;的敌人&nbsp;<code>i</code>&nbsp;。在这个操作中：\n\t<ul>\n\t\t<li>你的能量值增加 <code>enemyEnergies[i]</code>&nbsp;，也就是说&nbsp;<code>currentEnergy = currentEnergy + enemyEnergies[i]</code>&nbsp;。</li>\n\t\t<li>敌人&nbsp;<code>i</code> <strong>被标记</strong>&nbsp;。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>请你返回通过以上操作，<strong>最多</strong>&nbsp;可以获得多少分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><b>输入：</b>enemyEnergies = [3,2,2], currentEnergy = 2</p>\n\n<p><b>输出：</b>3</p>\n\n<p><strong>解释：</strong></p>\n\n<p>通过以下操作可以得到最大得分 3 分：</p>\n\n<ul>\n\t<li>对敌人 1 使用第一种操作：<code>points</code>&nbsp;增加 1 ，<code>currentEnergy</code>&nbsp;减少 2 。所以&nbsp;<code>points = 1</code>&nbsp;且&nbsp;<code>currentEnergy = 0</code>&nbsp;。</li>\n\t<li>对敌人 0 使用第二种操作：<code>currentEnergy</code>&nbsp;增加 3 ，敌人 0 被标记。所以&nbsp;<code>points = 1</code>&nbsp;，<code>currentEnergy = 3</code>&nbsp;，被标记的敌人包括&nbsp;<code>[0]</code>&nbsp;。</li>\n\t<li>对敌人 2 使用第一种操作：<code>points</code>&nbsp;增加 1 ，<code>currentEnergy</code>&nbsp;减少 2 。所以&nbsp;<code>points = 2</code>&nbsp;且&nbsp;<code>currentEnergy = 1</code>&nbsp;，被标记的敌人包括<code>[0]</code>&nbsp;。</li>\n\t<li>对敌人 2 使用第二种操作：<code>currentEnergy</code>&nbsp;增加 2 ，敌人 2 被标记。所以&nbsp;<code>points = 2</code>&nbsp;，<code>currentEnergy = 3</code>&nbsp;且被标记的敌人包括&nbsp;<code>[0, 2]</code>&nbsp;。</li>\n\t<li>对敌人 1 使用第一种操作：<code>points</code>&nbsp;增加 1 ，<code>currentEnergy</code>&nbsp;减少 2 。所以&nbsp;<code>points = 3</code>&nbsp;，<code>currentEnergy = 1</code>&nbsp;，被标记的敌人包括&nbsp;<code>[0, 2]</code>&nbsp;。</li>\n</ul>\n\n<p><strong>示例 2：</strong></p>\n\n<p><b>输入：</b>enemyEnergies =&nbsp;[2], currentEnergy = 10</p>\n\n<p><b>输出：</b>5</p>\n\n<p><strong>解释：</strong></p>\n\n<p>通过对敌人 0 进行第一种操作 5 次，得到最大得分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= enemyEnergies.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= enemyEnergies[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= currentEnergy &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3208.交替组 II",
        "hardRate": "MEDIUM",
        "passRate": "61.08%",
        "problemsUrl": "https://leetcode.cn/problems/alternating-groups-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/alternating-groups-ii/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>colors</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，<code>colors</code>表示一个由红色和蓝色瓷砖组成的环，第 <code>i</code>&nbsp;块瓷砖的颜色为&nbsp;<code>colors[i]</code>&nbsp;：</p>\n\n<ul>\n\t<li><code>colors[i] == 0</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;块瓷砖的颜色是 <strong>红色</strong>&nbsp;。</li>\n\t<li><code>colors[i] == 1</code>&nbsp;表示第 <code>i</code>&nbsp;块瓷砖的颜色是 <strong>蓝色</strong>&nbsp;。</li>\n</ul>\n\n<p>环中连续 <code>k</code>&nbsp;块瓷砖的颜色如果是 <strong>交替</strong>&nbsp;颜色（也就是说除了第一块和最后一块瓷砖以外，中间瓷砖的颜色与它<strong>&nbsp;左边</strong>&nbsp;和 <strong>右边</strong>&nbsp;的颜色都不同），那么它被称为一个 <strong>交替</strong>&nbsp;组。</p>\n\n<p>请你返回 <strong>交替</strong>&nbsp;组的数目。</p>\n\n<p><b>注意</b>&nbsp;，由于&nbsp;<code>colors</code>&nbsp;表示一个 <strong>环</strong>&nbsp;，<strong>第一块</strong>&nbsp;瓷砖和 <strong>最后一块</strong>&nbsp;瓷砖是相邻的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>colors = [0,1,0,1,0], k = 3</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>交替组包括：</p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>colors = [0,1,0,0,1,0,1], k = 6</span></p>\n\n<p><b>输出：</b>2</p>\n\n<p><b>解释：</b></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>交替组包括：</p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong>输入：</strong>colors = [1,1,0,1], k = 4</p>\n\n<p><strong>输出：</strong>0</p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= colors.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 1</code></li>\n\t<li><code>3 &lt;= k &lt;= colors.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3209.子数组按位与值为 K 的数目",
        "hardRate": "HARD",
        "passRate": "39.01%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回&nbsp;<code>nums</code>&nbsp;中有多少个<span data-keyword=\"subarray-nonempty\">子数组</span>满足：子数组中所有元素按位&nbsp;<code>AND</code>&nbsp;的结果为 <code>k</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,1,1], k = 1</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>6</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>所有子数组都只含有元素 1 。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,1,2], k = 1</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>3</span></p>\n\n<p><b>解释：</b></p>\n\n<p>按位&nbsp;<code>AND</code>&nbsp;值为 1 的子数组包括：<code>[<u><strong>1</strong></u>,1,2]</code>, <code>[1,<u><strong>1</strong></u>,2]</code>, <code>[<u><strong>1,1</strong></u>,2]</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,2,3], k = 2</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>按位&nbsp;<code>AND</code>&nbsp;值为 2 的子数组包括：<code>[1,<b><u>2</u></b>,3]</code>, <code>[1,<u><strong>2,3</strong></u>]</code>&nbsp;。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3210.找出加密后的字符串",
        "hardRate": "EASY",
        "passRate": "70.16%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-encrypted-string/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-encrypted-string/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code>。请你使用以下算法加密字符串：</p>\n\n<ul>\n\t<li>对于字符串 <code>s</code> 中的每个字符 <code>c</code>，用字符串中 <code>c</code> 后面的第 <code>k</code> 个字符替换 <code>c</code>（以循环方式）。</li>\n</ul>\n\n<p>返回加密后的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"dart\", k = 3</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">\"tdar\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>对于 <code>i = 0</code>，<code>'d'</code> 后面的第 3 个字符是 <code>'t'</code>。</li>\n\t<li>对于 <code>i = 1</code>，<code>'a'</code> 后面的第 3 个字符是 <code>'d'</code>。</li>\n\t<li>对于 <code>i = 2</code>，<code>'r'</code> 后面的第 3 个字符是 <code>'a'</code>。</li>\n\t<li>对于 <code>i = 3</code>，<code>'t'</code> 后面的第 3 个字符是 <code>'r'</code>。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"aaa\", k = 1</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">\"aaa\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>由于所有字符都相同，加密后的字符串也将相同。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3211.生成不含相邻零的二进制字符串",
        "hardRate": "MEDIUM",
        "passRate": "88.87%",
        "problemsUrl": "https://leetcode.cn/problems/generate-binary-strings-without-adjacent-zeros/",
        "solutionsUrl": "https://leetcode.cn/problems/generate-binary-strings-without-adjacent-zeros/solution",
        "problemsDesc": "<p>给你一个正整数 <code>n</code>。</p>\n\n<p>如果一个二进制字符串 <code>x</code> 的所有长度为 2 的<span data-keyword=\"substring-nonempty\">子字符串</span>中包含 <strong>至少</strong> 一个 <code>\"1\"</code>，则称 <code>x</code> 是一个<strong> 有效</strong> 字符串。</p>\n\n<p>返回所有长度为 <code>n</code> 的<strong> 有效</strong> 字符串，可以以任意顺序排列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 3</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[\"010\",\"011\",\"101\",\"110\",\"111\"]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>长度为 3 的有效字符串有：<code>\"010\"</code>、<code>\"011\"</code>、<code>\"101\"</code>、<code>\"110\"</code> 和 <code>\"111\"</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 1</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[\"0\",\"1\"]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>长度为 1 的有效字符串有：<code>\"0\"</code> 和 <code>\"1\"</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 18</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3212.统计 X 和 Y 频数相等的子矩阵数量",
        "hardRate": "MEDIUM",
        "passRate": "54.79%",
        "problemsUrl": "https://leetcode.cn/problems/count-submatrices-with-equal-frequency-of-x-and-y/",
        "solutionsUrl": "https://leetcode.cn/problems/count-submatrices-with-equal-frequency-of-x-and-y/solution",
        "problemsDesc": "<p>给你一个二维字符矩阵 <code>grid</code>，其中 <code>grid[i][j]</code> 可能是 <code>'X'</code>、<code>'Y'</code> 或 <code>'.'</code>，返回满足以下条件的<span data-keyword=\"submatrix\">子矩阵</span>数量：</p>\n\n<ul>\n\t<li>包含 <code>grid[0][0]</code></li>\n\t<li><code>'X'</code> 和 <code>'Y'</code> 的频数相等。</li>\n\t<li>至少包含一个 <code>'X'</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">grid = [[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/07/examplems.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 175px; height: 350px;\" /></strong></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">grid = [[\"X\",\"X\"],[\"X\",\"Y\"]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>不存在满足 <code>'X'</code> 和 <code>'Y'</code> 频数相等的子矩阵。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">grid = [[\".\",\".\"],[\".\",\".\"]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>不存在满足至少包含一个 <code>'X'</code> 的子矩阵。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>\n\t<li><code>grid[i][j]</code> 可能是 <code>'X'</code>、<code>'Y'</code> 或 <code>'.'</code>.</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3213.最小代价构造字符串",
        "hardRate": "HARD",
        "passRate": "28.30%",
        "problemsUrl": "https://leetcode.cn/problems/construct-string-with-minimum-cost/",
        "solutionsUrl": "https://leetcode.cn/problems/construct-string-with-minimum-cost/solution",
        "problemsDesc": "<p>给你一个字符串 <code>target</code>、一个字符串数组 <code>words</code> 以及一个整数数组 <code>costs</code>，这两个数组长度相同。</p>\n\n<p>设想一个空字符串 <code>s</code>。</p>\n\n<p>你可以执行以下操作任意次数（包括&nbsp;<strong>零&nbsp;</strong>次）：</p>\n\n<ul>\n\t<li>选择一个在范围&nbsp; <code>[0, words.length - 1]</code> 的索引 <code>i</code>。</li>\n\t<li>将 <code>words[i]</code> 追加到 <code>s</code>。</li>\n\t<li>该操作的成本是 <code>costs[i]</code>。</li>\n</ul>\n\n<p>返回使 <code>s</code> 等于 <code>target</code> 的 <strong>最小</strong> 成本。如果不可能，返回 <code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>选择索引 1 并以成本 1 将 <code>\"abc\"</code> 追加到 <code>s</code>，得到 <code>s = \"abc\"</code>。</li>\n\t<li>选择索引 2 并以成本 1 将 <code>\"d\"</code> 追加到 <code>s</code>，得到 <code>s = \"abcd\"</code>。</li>\n\t<li>选择索引 4 并以成本 5 将 <code>\"ef\"</code> 追加到 <code>s</code>，得到 <code>s = \"abcdef\"</code>。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>无法使 <code>s</code> 等于 <code>target</code>，因此返回 -1。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length == costs.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= target.length</code></li>\n\t<li>所有 <code>words[i].length</code> 的总和小于或等于 <code>5 * 10<sup>4</sup></code></li>\n\t<li><code>target</code> 和 <code>words[i]</code> 仅由小写英文字母组成。</li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3214.同比增长率",
        "hardRate": "HARD",
        "passRate": "58.26%",
        "problemsUrl": "https://leetcode.cn/problems/year-on-year-growth-rate/",
        "solutionsUrl": "https://leetcode.cn/problems/year-on-year-growth-rate/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3215.用偶数异或设置位计数三元组 II",
        "hardRate": "MEDIUM",
        "passRate": "68.88%",
        "problemsUrl": "https://leetcode.cn/problems/count-triplets-with-even-xor-set-bits-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/count-triplets-with-even-xor-set-bits-ii/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3216.交换后字典序最小的字符串",
        "hardRate": "EASY",
        "passRate": "71.40%",
        "problemsUrl": "https://leetcode.cn/problems/lexicographically-smallest-string-after-a-swap/",
        "solutionsUrl": "https://leetcode.cn/problems/lexicographically-smallest-string-after-a-swap/solution",
        "problemsDesc": "<p>给你一个仅由数字组成的字符串 <code>s</code>，在最多交换一次 <strong>相邻 </strong>且具有相同 <strong>奇偶性 </strong>的数字后，返回可以得到的<span data-keyword=\"lexicographically-smaller-string\">字典序最小的字符串</span>。</p>\n\n<p>如果两个数字都是奇数或都是偶数，则它们具有相同的奇偶性。例如，5 和 9、2 和 4 奇偶性相同，而 6 和 9 奇偶性不同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"45320\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">\"43520\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><code>s[1] == '5'</code> 和 <code>s[2] == '3'</code> 都具有相同的奇偶性，交换它们可以得到字典序最小的字符串。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"001\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">\"001\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>无需进行交换，因为 <code>s</code> 已经是字典序最小的。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 仅由数字组成。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3217.从链表中移除在数组中存在的节点",
        "hardRate": "MEDIUM",
        "passRate": "62.10%",
        "problemsUrl": "https://leetcode.cn/problems/delete-nodes-from-linked-list-present-in-array/",
        "solutionsUrl": "https://leetcode.cn/problems/delete-nodes-from-linked-list-present-in-array/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> 和一个链表的头节点 <code>head</code>。从链表中<strong>移除</strong>所有存在于 <code>nums</code> 中的节点后，返回修改后的链表的头节点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1,2,3], head = [1,2,3,4,5]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[4,5]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png\" style=\"width: 400px; height: 66px;\" /></strong></p>\n\n<p>移除数值为 1, 2 和 3 的节点。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1], head = [1,2,1,2,1,2]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[2,2,2]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png\" style=\"height: 62px; width: 450px;\" /></p>\n\n<p>移除数值为 1 的节点。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [5], head = [1,2,3,4]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[1,2,3,4]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png\" style=\"width: 400px; height: 83px;\" /></strong></p>\n\n<p>链表中不存在值为 5 的节点。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums</code> 中的所有元素都是唯一的。</li>\n\t<li>链表中的节点数在 <code>[1, 10<sup>5</sup>]</code> 的范围内。</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>输入保证链表中至少有一个值没有在&nbsp;<code>nums</code> 中出现过。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3218.切蛋糕的最小总开销 I",
        "hardRate": "MEDIUM",
        "passRate": "67.30%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-for-cutting-cake-i/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-for-cutting-cake-i/solution",
        "problemsDesc": "<p>有一个&nbsp;<code>m x n</code>&nbsp;大小的矩形蛋糕，需要切成&nbsp;<code>1 x 1</code>&nbsp;的小块。</p>\n\n<p>给你整数&nbsp;<code>m</code>&nbsp;，<code>n</code>&nbsp;和两个数组：</p>\n\n<ul>\n\t<li><code>horizontalCut</code> 的大小为&nbsp;<code>m - 1</code>&nbsp;，其中&nbsp;<code>horizontalCut[i]</code>&nbsp;表示沿着水平线 <code>i</code>&nbsp;切蛋糕的开销。</li>\n\t<li><code>verticalCut</code> 的大小为&nbsp;<code>n - 1</code>&nbsp;，其中&nbsp;<code>verticalCut[j]</code>&nbsp;表示沿着垂直线&nbsp;<code>j</code>&nbsp;切蛋糕的开销。</li>\n</ul>\n\n<p>一次操作中，你可以选择任意不是&nbsp;<code>1 x 1</code>&nbsp;大小的矩形蛋糕并执行以下操作之一：</p>\n\n<ol>\n\t<li>沿着水平线&nbsp;<code>i</code>&nbsp;切开蛋糕，开销为&nbsp;<code>horizontalCut[i]</code>&nbsp;。</li>\n\t<li>沿着垂直线&nbsp;<code>j</code>&nbsp;切开蛋糕，开销为&nbsp;<code>verticalCut[j]</code>&nbsp;。</li>\n</ol>\n\n<p>每次操作后，这块蛋糕都被切成两个独立的小蛋糕。</p>\n\n<p>每次操作的开销都为最开始对应切割线的开销，并且不会改变。</p>\n\n<p>请你返回将蛋糕全部切成&nbsp;<code>1 x 1</code>&nbsp;的蛋糕块的&nbsp;<strong>最小</strong>&nbsp;总开销。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>13</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style=\"width: 280px; height: 320px;\" /></p>\n\n<ul>\n\t<li>沿着垂直线 0 切开蛋糕，开销为 5 。</li>\n\t<li>沿着水平线 0 切开&nbsp;<code>3 x 1</code>&nbsp;的蛋糕块，开销为 1 。</li>\n\t<li>沿着水平线 0 切开 <code>3 x 1</code>&nbsp;的蛋糕块，开销为 1 。</li>\n\t<li>沿着水平线 1 切开 <code>2 x 1</code>&nbsp;的蛋糕块，开销为 3 。</li>\n\t<li>沿着水平线 1 切开 <code>2 x 1</code>&nbsp;的蛋糕块，开销为 3 。</li>\n</ul>\n\n<p>总开销为&nbsp;<code>5 + 1 + 1 + 3 + 3 = 13</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>15</span></p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>沿着水平线 0 切开蛋糕，开销为 7 。</li>\n\t<li>沿着垂直线 0 切开&nbsp;<code>1 x 2</code>&nbsp;的蛋糕块，开销为 4 。</li>\n\t<li>沿着垂直线 0 切开&nbsp;<code>1 x 2</code>&nbsp;的蛋糕块，开销为 4 。</li>\n</ul>\n\n<p>总开销为&nbsp;<code>7 + 4 + 4 = 15</code>&nbsp;。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>horizontalCut.length == m - 1</code></li>\n\t<li><code>verticalCut.length == n - 1</code></li>\n\t<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3219.切蛋糕的最小总开销 II",
        "hardRate": "HARD",
        "passRate": "63.93%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-for-cutting-cake-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-for-cutting-cake-ii/solution",
        "problemsDesc": "<p>有一个&nbsp;<code>m x n</code>&nbsp;大小的矩形蛋糕，需要切成&nbsp;<code>1 x 1</code>&nbsp;的小块。</p>\n\n<p>给你整数&nbsp;<code>m</code>&nbsp;，<code>n</code>&nbsp;和两个数组：</p>\n\n<ul>\n\t<li><code>horizontalCut</code> 的大小为&nbsp;<code>m - 1</code>&nbsp;，其中&nbsp;<code>horizontalCut[i]</code>&nbsp;表示沿着水平线 <code>i</code>&nbsp;切蛋糕的开销。</li>\n\t<li><code>verticalCut</code> 的大小为&nbsp;<code>n - 1</code>&nbsp;，其中&nbsp;<code>verticalCut[j]</code>&nbsp;表示沿着垂直线&nbsp;<code>j</code>&nbsp;切蛋糕的开销。</li>\n</ul>\n\n<p>一次操作中，你可以选择任意不是&nbsp;<code>1 x 1</code>&nbsp;大小的矩形蛋糕并执行以下操作之一：</p>\n\n<ol>\n\t<li>沿着水平线&nbsp;<code>i</code>&nbsp;切开蛋糕，开销为&nbsp;<code>horizontalCut[i]</code>&nbsp;。</li>\n\t<li>沿着垂直线&nbsp;<code>j</code>&nbsp;切开蛋糕，开销为&nbsp;<code>verticalCut[j]</code>&nbsp;。</li>\n</ol>\n\n<p>每次操作后，这块蛋糕都被切成两个独立的小蛋糕。</p>\n\n<p>每次操作的开销都为最开始对应切割线的开销，并且不会改变。</p>\n\n<p>请你返回将蛋糕全部切成&nbsp;<code>1 x 1</code>&nbsp;的蛋糕块的&nbsp;<strong>最小</strong>&nbsp;总开销。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>13</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style=\"width: 280px; height: 320px;\" /></p>\n\n<ul>\n\t<li>沿着垂直线 0 切开蛋糕，开销为 5 。</li>\n\t<li>沿着水平线 0 切开&nbsp;<code>3 x 1</code>&nbsp;的蛋糕块，开销为 1 。</li>\n\t<li>沿着水平线 0 切开 <code>3 x 1</code>&nbsp;的蛋糕块，开销为 1 。</li>\n\t<li>沿着水平线 1 切开 <code>2 x 1</code>&nbsp;的蛋糕块，开销为 3 。</li>\n\t<li>沿着水平线 1 切开 <code>2 x 1</code>&nbsp;的蛋糕块，开销为 3 。</li>\n</ul>\n\n<p>总开销为&nbsp;<code>5 + 1 + 1 + 3 + 3 = 13</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>15</span></p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>沿着水平线 0 切开蛋糕，开销为 7 。</li>\n\t<li>沿着垂直线 0 切开&nbsp;<code>1 x 2</code>&nbsp;的蛋糕块，开销为 4 。</li>\n\t<li>沿着垂直线 0 切开&nbsp;<code>1 x 2</code>&nbsp;的蛋糕块，开销为 4 。</li>\n</ul>\n\n<p>总开销为&nbsp;<code>7 + 4 + 4 = 15</code>&nbsp;。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>horizontalCut.length == m - 1</code></li>\n\t<li><code>verticalCut.length == n - 1</code></li>\n\t<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3220.奇数和偶数交易",
        "hardRate": "MEDIUM",
        "passRate": "69.13%",
        "problemsUrl": "https://leetcode.cn/problems/odd-and-even-transactions/",
        "solutionsUrl": "https://leetcode.cn/problems/odd-and-even-transactions/solution",
        "problemsDesc": "<p>表：<code>transactions</code></p>\n\n<pre>\n+------------------+------+\n| Column Name      | Type | \n+------------------+------+\n| transaction_id   | int  |\n| amount           | int  |\n| transaction_date | date |\n+------------------+------+\ntransactions_id 列唯一标识了表中的每一行。\n这张表的每一行包含交易 id，金额总和和交易日期。\n</pre>\n\n<p>编写一个解决方案来查找每天 <strong>奇数</strong> 交易金额和 <strong>偶数</strong> 交易金额的 <strong>总和</strong>。如果某天没有奇数或偶数交易，显示为&nbsp;<code>0</code>。</p>\n\n<p>返回结果表以&nbsp;<code>transaction_date</code> <strong>升序</strong>&nbsp;排序。</p>\n\n<p>结果格式如下所示。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例：</strong></p>\n\n<div class=\"example-block\">\n<p><b>输入：</b></p>\n\n<p><code>transactions</code> 表：</p>\n\n<pre class=\"example-io\">\n+----------------+--------+------------------+\n| transaction_id | amount | transaction_date |\n+----------------+--------+------------------+\n| 1              | 150    | 2024-07-01       |\n| 2              | 200    | 2024-07-01       |\n| 3              | 75     | 2024-07-01       |\n| 4              | 300    | 2024-07-02       |\n| 5              | 50     | 2024-07-02       |\n| 6              | 120    | 2024-07-03       |\n+----------------+--------+------------------+\n  </pre>\n\n<p><strong>输出：</strong></p>\n\n<pre class=\"example-io\">\n+------------------+---------+----------+\n| transaction_date | odd_sum | even_sum |\n+------------------+---------+----------+\n| 2024-07-01       | 75      | 350      |\n| 2024-07-02       | 0       | 350      |\n| 2024-07-03       | 0       | 120      |\n+------------------+---------+----------+\n  </pre>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>对于交易日期：\n\t<ul>\n\t\t<li>2024-07-01:\n\t\t<ul>\n\t\t\t<li>奇数交易金额总和：75</li>\n\t\t\t<li>偶数交易金额总和：150 + 200 = 350</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>2024-07-02:\n\t\t<ul>\n\t\t\t<li>奇数交易金额总和：0</li>\n\t\t\t<li>偶数交易金额总和：300 + 50 = 350</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>2024-07-03:\n\t\t<ul>\n\t\t\t<li>奇数交易金额总和：0</li>\n\t\t\t<li>偶数交易金额总和：120</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><b>注意：</b>输出表以&nbsp;<code>transaction_date</code>&nbsp;升序排序。</p>\n</div>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3221.最大数组跳跃得分 II",
        "hardRate": "MEDIUM",
        "passRate": "64.35%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-array-hopping-score-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-array-hopping-score-ii/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3222.求出硬币游戏的赢家",
        "hardRate": "EASY",
        "passRate": "71.66%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-winning-player-in-coin-game/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-winning-player-in-coin-game/solution",
        "problemsDesc": "<p>给你两个 <strong>正</strong>&nbsp;整数&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp;，分别表示价值为 75 和 10 的硬币的数目。</p>\n\n<p>Alice 和 Bob 正在玩一个游戏。每一轮中，Alice&nbsp;先进行操作，Bob 后操作。每次操作中，玩家需要拿走价值 <b>总和</b>&nbsp;为 115 的硬币。如果一名玩家无法执行此操作，那么这名玩家 <strong>输掉</strong>&nbsp;游戏。</p>\n\n<p>两名玩家都采取 <strong>最优</strong>&nbsp;策略，请你返回游戏的赢家。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>x = 2, y = 7</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"Alice\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>游戏一次操作后结束：</p>\n\n<ul>\n\t<li>Alice 拿走 1 枚价值为 75 的硬币和 4 枚价值为 10 的硬币。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>x = 4, y = 11</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"Bob\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>游戏 2 次操作后结束：</p>\n\n<ul>\n\t<li>Alice 拿走&nbsp;1 枚价值为 75 的硬币和 4 枚价值为 10 的硬币。</li>\n\t<li>Bob 拿走&nbsp;1 枚价值为 75 的硬币和 4 枚价值为 10 的硬币。</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x, y &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3223.操作后字符串的最短长度",
        "hardRate": "MEDIUM",
        "passRate": "56.83%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-length-of-string-after-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-length-of-string-after-operations/solution",
        "problemsDesc": "<p>给你一个字符串&nbsp;<code>s</code>&nbsp;。</p>\n\n<p>你需要对 <code>s</code>&nbsp;执行以下操作 <strong>任意</strong>&nbsp;次：</p>\n\n<ul>\n\t<li>选择一个下标 <code>i</code>&nbsp;，满足 <code>s[i]</code>&nbsp;左边和右边都&nbsp;<strong>至少</strong>&nbsp;有一个字符与它相同。</li>\n\t<li>删除 <code>i</code>&nbsp;<strong>左边</strong>&nbsp;离它 <strong>最近</strong>&nbsp;的&nbsp;<code>s[i]</code> 字符。</li>\n\t<li>删除 <code>i</code>&nbsp;<strong>右边</strong>&nbsp;离它 <strong>最近</strong>&nbsp;的&nbsp;<code>s[i]</code> 字符。</li>\n</ul>\n\n<p>请你返回执行完所有操作后， <code>s</code>&nbsp;的 <strong>最短</strong>&nbsp;长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"abaacbcbb\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>5</span></p>\n\n<p><strong>解释：</strong><br />\n我们执行以下操作：</p>\n\n<ul>\n\t<li>选择下标 2 ，然后删除下标 0 和 3 处的字符，得到&nbsp;<code>s = \"bacbcbb\"</code>&nbsp;。</li>\n\t<li>选择下标 3 ，然后删除下标 0 和 5 处的字符，得到&nbsp;<code>s = \"acbcb\"</code>&nbsp;。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"aa\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong><br />\n无法对字符串进行任何操作，所以返回初始字符串的长度。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3224.使差值相等的最少数组改动次数",
        "hardRate": "MEDIUM",
        "passRate": "30.59%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-array-changes-to-make-differences-equal/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-array-changes-to-make-differences-equal/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>nums</code>&nbsp;，<code>n</code>&nbsp;是 <strong>偶数</strong>&nbsp;，同时给你一个整数&nbsp;<code>k</code>&nbsp;。</p>\n\n<p>你可以对数组进行一些操作。每次操作中，你可以将数组中 <strong>任一</strong>&nbsp;元素替换为 <code>0</code>&nbsp;到 <code>k</code>&nbsp;之间的<strong>&nbsp;任一</strong>&nbsp;整数。</p>\n\n<p>执行完所有操作以后，你需要确保最后得到的数组满足以下条件：</p>\n\n<ul>\n\t<li>存在一个整数 <code>X</code>&nbsp;，满足对于所有的&nbsp;<code>(0 &lt;= i &lt; n)</code>&nbsp;都有&nbsp;<code>abs(a[i] - a[n - i - 1]) = X</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回满足以上条件 <strong>最少</strong>&nbsp;修改次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,0,1,2,4,3], k = 4</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong><br />\n我们可以执行以下操作：</p>\n\n<ul>\n\t<li>将&nbsp;<code>nums[1]</code>&nbsp;变为 2 ，结果数组为&nbsp;<code>nums = [1,<em><strong>2</strong></em>,1,2,4,3]</code>&nbsp;。</li>\n\t<li>将&nbsp;<code>nums[3]</code>&nbsp;变为 3 ，结果数组为&nbsp;<code>nums = [1,2,1,<em><strong>3</strong></em>,4,3]</code>&nbsp;。</li>\n</ul>\n\n<p>整数&nbsp;<code>X</code>&nbsp;为 2 。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [0,1,2,3,3,6,5,4], k = 6</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong><br />\n我们可以执行以下操作：</p>\n\n<ul>\n\t<li>将&nbsp;<code>nums[3]</code>&nbsp;变为 0 ，结果数组为&nbsp;<code>nums = [0,1,2,<em><strong>0</strong></em>,3,6,5,4]</code>&nbsp;。</li>\n\t<li>将&nbsp;<code>nums[4]</code>&nbsp;变为 4 ，结果数组为&nbsp;<code>nums = [0,1,2,0,<em><strong>4</strong></em>,6,5,4]</code>&nbsp;。</li>\n</ul>\n\n<p>整数 <code>X</code>&nbsp;为 4 。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n</code>&nbsp;是偶数。</li>\n\t<li><code>0 &lt;= nums[i] &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3225.网格图操作后的最大分数",
        "hardRate": "HARD",
        "passRate": "28.85%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-score-from-grid-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-score-from-grid-operations/solution",
        "problemsDesc": "<p>给你一个大小为 <code>n x n</code>&nbsp;的二维矩阵&nbsp;<code>grid</code>&nbsp;，一开始所有格子都是白色的。一次操作中，你可以选择任意下标为&nbsp;<code>(i, j)</code>&nbsp;的格子，并将第&nbsp;<code>j</code>&nbsp;列中从最上面到第&nbsp;<code>i</code>&nbsp;行所有格子改成黑色。</p>\n\n<p>如果格子 <code>(i, j)</code>&nbsp;为白色，且左边或者右边的格子至少一个格子为黑色，那么我们将 <code>grid[i][j]</code>&nbsp;加到最后网格图的总分中去。</p>\n\n<p>请你返回执行任意次操作以后，最终网格图的 <strong>最大</strong>&nbsp;总分数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>11</span></p>\n\n<p><strong>解释：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/11/one.png\" style=\"width: 300px; height: 200px;\" />\n<p>第一次操作中，我们将第 1 列中，最上面的格子到第 3 行的格子染成黑色。第二次操作中，我们将第 4 列中，最上面的格子到最后一行的格子染成黑色。最后网格图总分为&nbsp;<code>grid[3][0] + grid[1][2] + grid[3][3]</code>&nbsp;等于 11 。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[10,9,0,0,15],[7,1,0,8,0],[5,20,0,11,0],[0,0,0,1,2],[8,12,1,10,3]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>94</span></p>\n\n<p><strong>解释：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/11/two-1.png\" style=\"width: 300px; height: 200px;\" />\n<p>我们对第 1 ，2 ，3 列分别从上往下染黑色到第 1 ，4， 0 行。最后网格图总分为&nbsp;<code>grid[0][0] + grid[1][0] + grid[2][1] + grid[4][1] + grid[1][3] + grid[2][3] + grid[3][3] + grid[4][3] + grid[0][4]</code>&nbsp;等于 94 。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;n == grid.length &lt;= 100</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3226.使两个整数相等的位更改次数",
        "hardRate": "EASY",
        "passRate": "75.26%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-bit-changes-to-make-two-integers-equal/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-bit-changes-to-make-two-integers-equal/solution",
        "problemsDesc": "<p>给你两个正整数 <code>n</code> 和 <code>k</code>。</p>\n\n<p>你可以选择 <code>n</code> 的 <strong>二进制表示</strong> 中任意一个值为 1 的位，并将其改为 0。</p>\n\n<p>返回使得 <code>n</code> 等于 <code>k</code> 所需要的更改次数。如果无法实现，返回 -1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 13, k = 4</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>解释：</strong><br />\n最初，<code>n</code> 和 <code>k</code> 的二进制表示分别为 <code>n = (1101)<sub>2</sub></code> 和 <code>k = (0100)<sub>2</sub></code>，</p>\n\n<p>我们可以改变 <code>n</code> 的第一位和第四位。结果整数为 <code>n = (<u><strong>0</strong></u>10<u><strong>0</strong></u>)<sub>2</sub> = k</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 21, k = 21</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong><br />\n<code>n</code> 和 <code>k</code> 已经相等，因此不需要更改。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 14, k = 13</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>解释：</strong><br />\n无法使 <code>n</code> 等于 <code>k</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, k &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3227.字符串元音游戏",
        "hardRate": "MEDIUM",
        "passRate": "60.47%",
        "problemsUrl": "https://leetcode.cn/problems/vowels-game-in-a-string/",
        "solutionsUrl": "https://leetcode.cn/problems/vowels-game-in-a-string/solution",
        "problemsDesc": "<p>小红和小明在玩一个字符串元音游戏。</p>\n\n<p>给你一个字符串 <code>s</code>，小红和小明将轮流参与游戏，小红<strong> 先 </strong>开始：</p>\n\n<ul>\n\t<li>在小红的回合，她必须移除 <code>s</code> 中包含 <strong>奇数 </strong>个元音的任意 <strong>非空</strong> <span data-keyword=\"substring\">子字符串</span>。</li>\n\t<li>在小明的回合，他必须移除 <code>s</code> 中包含 <strong>偶数 </strong>个元音的任意 <strong>非空</strong> <span data-keyword=\"substring\">子字符串</span>。</li>\n</ul>\n\n<p>第一个无法在其回合内进行移除操作的玩家输掉游戏。假设小红和小明都采取 <strong>最优策略 </strong>。</p>\n\n<p>如果小红赢得游戏，返回 <code>true</code>，否则返回 <code>false</code>。</p>\n\n<p>英文元音字母包括：<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, 和 <code>u</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"leetcoder\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>解释：</strong><br />\n小红可以执行如下移除操作来赢得游戏：</p>\n\n<ul>\n\t<li>小红先手，她可以移除加下划线的子字符串 <code>s = \"<u><strong>leetco</strong></u>der\"</code>，其中包含 3 个元音。结果字符串为 <code>s = \"der\"</code>。</li>\n\t<li>小明接着，他可以移除加下划线的子字符串 <code>s = \"<u><strong>d</strong></u>er\"</code>，其中包含 0 个元音。结果字符串为 <code>s = \"er\"</code>。</li>\n\t<li>小红再次操作，她可以移除整个字符串 <code>s = \"<strong><u>er</u></strong>\"</code>，其中包含 1 个元音。</li>\n\t<li>又轮到小明，由于字符串为空，无法执行移除操作，因此小红赢得游戏。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"bbcd\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>解释：</strong><br />\n小红在她的第一回合无法执行移除操作，因此小红输掉了游戏。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3228.将 1 移动到末尾的最大操作次数",
        "hardRate": "MEDIUM",
        "passRate": "57.15%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-operations-to-move-ones-to-the-end/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-operations-to-move-ones-to-the-end/solution",
        "problemsDesc": "<p>给你一个 <span data-keyword=\"binary-string\">二进制字符串</span> <code>s</code>。</p>\n\n<p>你可以对这个字符串执行 <strong>任意次</strong> 下述操作：</p>\n\n<ul>\n\t<li>选择字符串中的任一下标 <code>i</code>（ <code>i + 1 &lt; s.length</code> ），该下标满足 <code>s[i] == '1'</code> 且 <code>s[i + 1] == '0'</code>。</li>\n\t<li>将字符 <code>s[i]</code> 向 <strong>右移 </strong>直到它到达字符串的末端或另一个 <code>'1'</code>。例如，对于 <code>s = \"010010\"</code>，如果我们选择 <code>i = 1</code>，结果字符串将会是 <code>s = \"0<strong><u>001</u></strong>10\"</code>。</li>\n</ul>\n\n<p>返回你能执行的<strong> 最大 </strong>操作次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"1001101\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>可以执行以下操作：</p>\n\n<ul>\n\t<li>选择下标 <code>i = 0</code>。结果字符串为 <code>s = \"<u><strong>001</strong></u>1101\"</code>。</li>\n\t<li>选择下标 <code>i = 4</code>。结果字符串为 <code>s = \"0011<u><strong>01</strong></u>1\"</code>。</li>\n\t<li>选择下标 <code>i = 3</code>。结果字符串为 <code>s = \"001<strong><u>01</u></strong>11\"</code>。</li>\n\t<li>选择下标 <code>i = 2</code>。结果字符串为 <code>s = \"00<strong><u>01</u></strong>111\"</code>。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">s = \"00111\"</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">0</span></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> 为 <code>'0'</code> 或 <code>'1'</code>。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3229.使数组等于目标数组所需的最少操作次数",
        "hardRate": "HARD",
        "passRate": "37.78%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-operations-to-make-array-equal-to-target/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-operations-to-make-array-equal-to-target/solution",
        "problemsDesc": "<p>给你两个长度相同的正整数数组 <code>nums</code> 和 <code>target</code>。</p>\n\n<p>在一次操作中，你可以选择 <code>nums</code> 的任何子数组，并将该子数组内的每个元素的值增加或减少 1。</p>\n\n<p>返回使 <code>nums</code> 数组变为 <code>target</code> 数组所需的 <strong>最少 </strong>操作次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [3,5,1,2], target = [4,6,2,4]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>执行以下操作可以使 <code>nums</code> 等于 <code>target</code>：<br />\n- <code>nums[0..3]</code> 增加 1，<code>nums = [4,6,2,3]</code>。<br />\n- <code>nums[3..3]</code> 增加 1，<code>nums = [4,6,2,4]</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [1,3,2], target = [2,1,4]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>执行以下操作可以使 <code>nums</code> 等于 <code>target</code>：<br />\n- <code>nums[0..0]</code> 增加 1，<code>nums = [2,3,2]</code>。<br />\n- <code>nums[1..1]</code> 减少 1，<code>nums = [2,2,2]</code>。<br />\n- <code>nums[1..1]</code> 减少 1，<code>nums = [2,1,2]</code>。<br />\n- <code>nums[2..2]</code> 增加 1，<code>nums = [2,1,3]</code>。<br />\n- <code>nums[2..2]</code> 增加 1，<code>nums = [2,1,4]</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == target.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], target[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3230.客户购买行为分析",
        "hardRate": "MEDIUM",
        "passRate": "36.08%",
        "problemsUrl": "https://leetcode.cn/problems/customer-purchasing-behavior-analysis/",
        "solutionsUrl": "https://leetcode.cn/problems/customer-purchasing-behavior-analysis/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3231.要删除的递增子序列的最小数量",
        "hardRate": "HARD",
        "passRate": "61.05%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-increasing-subsequence-to-be-removed/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-increasing-subsequence-to-be-removed/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3232.判断是否可以赢得数字游戏",
        "hardRate": "EASY",
        "passRate": "87.33%",
        "problemsUrl": "https://leetcode.cn/problems/find-if-digit-game-can-be-won/",
        "solutionsUrl": "https://leetcode.cn/problems/find-if-digit-game-can-be-won/solution",
        "problemsDesc": "<p>给你一个 <strong>正整数 </strong>数组 <code>nums</code>。</p>\n\n<p>Alice 和 Bob 正在玩游戏。在游戏中，Alice 可以从 <code>nums</code> 中选择所有个位数 <strong>或</strong> 所有两位数，剩余的数字归 Bob 所有。如果 Alice 所选数字之和 <strong>严格大于 </strong>Bob 的数字之和，则 Alice 获胜。</p>\n\n<p>如果 Alice 能赢得这场游戏，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [1,2,3,4,10]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">false</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>Alice&nbsp;不管选个位数还是两位数都无法赢得比赛。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [1,2,3,4,5,14]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>Alice&nbsp;选择个位数可以赢得比赛，所选数字之和为 15。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [5,5,5,25]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>Alice&nbsp;选择两位数可以赢得比赛，所选数字之和为 25。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 99</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3233.统计不是特殊数字的数字数量",
        "hardRate": "MEDIUM",
        "passRate": "41.08%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-count-of-numbers-which-are-not-special/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-count-of-numbers-which-are-not-special/solution",
        "problemsDesc": "<p>给你两个<strong> 正整数 </strong><code>l</code> 和 <code>r</code>。对于任何数字 <code>x</code>，<code>x</code> 的所有正因数（除了 <code>x</code> 本身）被称为 <code>x</code> 的 <strong>真因数</strong>。</p>\n\n<p><span class=\"text-only\" data-eleid=\"13\" style=\"white-space: pre;\">如果一个数字恰好仅有两个</span> <strong>真因数</strong>，则称该数字为 <strong>特殊数字</strong>。例如：</p>\n\n<ul>\n\t<li>数字 4 是<strong> 特殊数字</strong>，因为它的真因数为 1 和 2。</li>\n\t<li>数字 6 不是 <strong>特殊数字</strong>，因为它的真因数为 1、2 和 3。</li>\n</ul>\n\n<p>返回区间 <code>[l, r]</code> 内<strong> 不是 特殊数字 </strong>的数字数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">l = 5, r = 7</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>区间 <code>[5, 7]</code> 内不存在特殊数字。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">l = 4, r = 16</span></p>\n\n<p><strong>输出：</strong> <span class=\"reset-io\">11</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>区间 <code>[4, 16]</code> 内的特殊数字为 4 和 9。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= l &lt;= r &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3234.统计 1 显著的字符串的数量",
        "hardRate": "MEDIUM",
        "passRate": "29.94%",
        "problemsUrl": "https://leetcode.cn/problems/count-the-number-of-substrings-with-dominant-ones/",
        "solutionsUrl": "https://leetcode.cn/problems/count-the-number-of-substrings-with-dominant-ones/solution",
        "problemsDesc": "<p>给你一个二进制字符串 <code>s</code>。</p>\n\n<p>请你统计并返回其中 <strong>1 显著 </strong> 的 <span data-keyword=\"substring-nonempty\">子字符串</span> 的数量。</p>\n\n<p>如果字符串中 1 的数量 <strong>大于或等于</strong> 0 的数量的 <strong>平方</strong>，则认为该字符串是一个 <strong>1 显著</strong> 的字符串 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"00011\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">5</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>1 显著的子字符串如下表所示。</p>\n</div>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>s[i..j]</th>\n\t\t\t<th>0 的数量</th>\n\t\t\t<th>1 的数量</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>3</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>4</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>01</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t\t<td>11</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t\t<td>011</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"101101\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">16</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>1 不显著的子字符串如下表所示。</p>\n\n<p>总共有 21 个子字符串，其中 5 个是 1 不显著字符串，因此有 16 个 1 显著子字符串。</p>\n</div>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>s[i..j]</th>\n\t\t\t<th>0 的数量</th>\n\t\t\t<th>1 的数量</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>4</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td>0110</td>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>4</td>\n\t\t\t<td>10110</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t\t<td>01101</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> 仅包含字符 <code>'0'</code> 和 <code>'1'</code>。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3235.判断矩形的两个角落是否可达",
        "hardRate": "HARD",
        "passRate": "47.29%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-the-rectangle-corner-is-reachable/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-the-rectangle-corner-is-reachable/solution",
        "problemsDesc": "<p>给你两个正整数&nbsp;<code>xCorner</code> 和&nbsp;<code>yCorner</code>&nbsp;和一个二维整数数组&nbsp;<code>circles</code>&nbsp;，其中&nbsp;<code>circles[i] = [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>]</code>&nbsp;表示一个圆心在&nbsp;<code>(x<sub>i</sub>, y<sub>i</sub>)</code>&nbsp;半径为&nbsp;<code>r<sub>i</sub></code>&nbsp;的圆。</p>\n\n<p>坐标平面内有一个左下角在原点，右上角在&nbsp;<code>(xCorner, yCorner)</code>&nbsp;的矩形。你需要判断是否存在一条从左下角到右上角的路径满足：路径&nbsp;<strong>完全</strong>&nbsp;在矩形内部，<strong>不会</strong>&nbsp;触碰或者经过 <strong>任何</strong>&nbsp;圆的内部和边界，同时&nbsp;<strong>只</strong> 在起点和终点接触到矩形。</p>\n\n<p>如果存在这样的路径，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>X = 3, Y = 4, circles = [[2,1,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example2circle1.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>黑色曲线表示一条从&nbsp;<code>(0, 0)</code>&nbsp;到&nbsp;<code>(3, 4)</code>&nbsp;的路径。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>X = 3, Y = 3, circles = [[1,1,2]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>false</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example1circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>不存在从&nbsp;<code>(0, 0)</code> 到&nbsp;<code>(3, 3)</code>&nbsp;的路径。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>X = 3, Y = 3, circles = [[2,1,1],[1,2,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>false</span></p>\n\n<p><b>解释：</b></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example0circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>不存在从&nbsp;<code>(0, 0)</code>&nbsp;到&nbsp;<code>(3, 3)</code>&nbsp;的路径。</p>\n</div>\n\n<p><strong class=\"example\">示例 4：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">X = 4, Y = 4, circles = [[5,5,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/rectangles.png\" style=\"width: 346px; height: 264px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= xCorner, yCorner&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= circles.length &lt;= 1000</code></li>\n\t<li><code>circles[i].length == 3</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3236.首席执行官下属层级",
        "hardRate": "HARD",
        "passRate": "73.78%",
        "problemsUrl": "https://leetcode.cn/problems/ceo-subordinate-hierarchy/",
        "solutionsUrl": "https://leetcode.cn/problems/ceo-subordinate-hierarchy/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3237.Alt 和 Tab 模拟",
        "hardRate": "MEDIUM",
        "passRate": "70.29%",
        "problemsUrl": "https://leetcode.cn/problems/alt-and-tab-simulation/",
        "solutionsUrl": "https://leetcode.cn/problems/alt-and-tab-simulation/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3238.求出胜利玩家的数目",
        "hardRate": "EASY",
        "passRate": "70.67%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-number-of-winning-players/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-number-of-winning-players/solution",
        "problemsDesc": "<p>给你一个整数&nbsp;<code>n</code>&nbsp;，表示在一个游戏中的玩家数目。同时给你一个二维整数数组&nbsp;<code>pick</code>&nbsp;，其中&nbsp;<code>pick[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;表示玩家&nbsp;<code>x<sub>i</sub></code>&nbsp;获得了一个颜色为&nbsp;<code>y<sub>i</sub></code>&nbsp;的球。</p>\n\n<p>如果玩家 <code>i</code>&nbsp;获得的球中任何一种颜色球的数目 <strong>严格大于</strong>&nbsp;<code>i</code>&nbsp;个，那么我们说玩家 <code>i</code>&nbsp;是胜利玩家。换句话说：</p>\n\n<ul>\n\t<li>如果玩家 0 获得了任何的球，那么玩家 0 是胜利玩家。</li>\n\t<li>如果玩家 1 获得了至少 2 个相同颜色的球，那么玩家 1 是胜利玩家。</li>\n\t<li>...</li>\n\t<li>如果玩家 <code>i</code>&nbsp;获得了至少&nbsp;<code>i + 1</code>&nbsp;个相同颜色的球，那么玩家 <code>i</code>&nbsp;是胜利玩家。</li>\n</ul>\n\n<p>请你返回游戏中 <strong>胜利玩家</strong>&nbsp;的数目。</p>\n\n<p><strong>注意</strong>，可能有多个玩家是胜利玩家。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>n = 4, pick = [[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>玩家 0 和玩家 1 是胜利玩家，玩家 2 和玩家 3 不是胜利玩家。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>n = 5, pick = [[1,1],[1,2],[1,3],[1,4]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>没有胜利玩家。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>n = 5, pick = [[1,1],[2,4],[2,4],[2,4]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>1</span></p>\n\n<p><b>解释：</b></p>\n\n<p>玩家 2 是胜利玩家，因为玩家 2 获得了 3 个颜色为 4 的球。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= pick.length &lt;= 100</code></li>\n\t<li><code>pick[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub> &lt;= n - 1 </code></li>\n\t<li><code>0 &lt;= y<sub>i</sub> &lt;= 10</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3239.最少翻转次数使二进制矩阵回文 I",
        "hardRate": "MEDIUM",
        "passRate": "87.27%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>grid</code>&nbsp;。</p>\n\n<p>如果矩阵中一行或者一列从前往后与从后往前读是一样的，那么我们称这一行或者这一列是 <strong>回文</strong> 的。</p>\n\n<p>你可以将 <code>grid</code>&nbsp;中任意格子的值 <strong>翻转</strong>&nbsp;，也就是将格子里的值从 <code>0</code>&nbsp;变成 <code>1</code>&nbsp;，或者从 <code>1</code>&nbsp;变成 <code>0</code>&nbsp;。</p>\n\n<p>请你返回 <strong>最少</strong>&nbsp;翻转次数，使得矩阵 <strong>要么</strong>&nbsp;所有行是 <strong>回文的</strong>&nbsp;，要么所有列是 <strong>回文的</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[1,0,0],[0,0,0],[0,0,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><b>解释：</b></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-20-10.png\" style=\"width: 420px; height: 108px;\" /></p>\n\n<p>将高亮的格子翻转，得到所有行都是回文的。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = </span>[[0,1],[0,1],[0,0]]</p>\n\n<p><span class=\"example-io\"><b>输出：</b>1</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-31-23.png\" style=\"width: 300px; height: 100px;\" /></p>\n\n<p>将高亮的格子翻转，得到所有列都是回文的。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[1],[0]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>所有行已经是回文的。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3240.最少翻转次数使二进制矩阵回文 II",
        "hardRate": "MEDIUM",
        "passRate": "53.55%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>grid</code>&nbsp;。</p>\n\n<p>如果矩阵中一行或者一列从前往后与从后往前读是一样的，那么我们称这一行或者这一列是 <strong>回文</strong>&nbsp;的。</p>\n\n<p>你可以将 <code>grid</code>&nbsp;中任意格子的值 <strong>翻转</strong>&nbsp;，也就是将格子里的值从 <code>0</code>&nbsp;变成 <code>1</code>&nbsp;，或者从 <code>1</code>&nbsp;变成 <code>0</code>&nbsp;。</p>\n\n<p>请你返回 <strong>最少</strong>&nbsp;翻转次数，使得矩阵中 <strong>所有</strong>&nbsp;行和列都是 <strong>回文的</strong>&nbsp;，且矩阵中 <code>1</code>&nbsp;的数目可以被 <code>4</code>&nbsp;<strong>整除</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[1,0,0],[0,1,0],[0,0,1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/08/01/image.png\" style=\"width: 400px; height: 105px;\" /></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[0,1],[0,1],[0,0]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/08/screenshot-from-2024-07-09-01-37-48.png\" style=\"width: 300px; height: 104px;\" /></p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>grid = [[1],[1]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>2</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/01/screenshot-from-2024-08-01-23-05-26.png\" style=\"width: 200px; height: 70px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3241.标记所有节点需要的时间",
        "hardRate": "HARD",
        "passRate": "33.21%",
        "problemsUrl": "https://leetcode.cn/problems/time-taken-to-mark-all-nodes/",
        "solutionsUrl": "https://leetcode.cn/problems/time-taken-to-mark-all-nodes/solution",
        "problemsDesc": "<p>给你一棵 <strong>无向</strong>&nbsp;树，树中节点从 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;编号。同时给你一个长度为 <code>n - 1</code>&nbsp;的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示节点&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code>&nbsp;在树中有一条边。</p>\n\n<p>一开始，<strong>所有</strong>&nbsp;节点都 <strong>未标记</strong>&nbsp;。对于节点 <code>i</code>&nbsp;：</p>\n\n<ul>\n\t<li>当&nbsp;<code>i</code>&nbsp;是奇数时，如果时刻 <code>x - 1</code>&nbsp;该节点有 <strong>至少</strong>&nbsp;一个相邻节点已经被标记了，那么节点 <code>i</code>&nbsp;会在时刻 <code>x</code>&nbsp;被标记。</li>\n\t<li>当&nbsp;<code>i</code>&nbsp;是偶数时，如果时刻 <code>x - 2</code>&nbsp;该节点有 <strong>至少</strong>&nbsp;一个相邻节点已经被标记了，那么节点 <code>i</code>&nbsp;会在时刻 <code>x</code>&nbsp;被标记。</li>\n</ul>\n\n<p>请你返回一个数组&nbsp;<code>times</code>&nbsp;，表示如果你在时刻 <code>t = 0</code>&nbsp;标记节点 <code>i</code>&nbsp;，那么时刻 <code>times[i]</code>&nbsp;时，树中所有节点都会被标记。</p>\n\n<p>请注意，每个 <code>times[i]</code> 的答案都是独立的，即当你标记节点 <code>i</code> 时，所有其他节点都未标记。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges = [[0,1],[0,2]]</span></p>\n\n<p><b>输出：</b>[2,4,3]</p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122236.png\" style=\"width: 500px; height: 241px;\" /></p>\n\n<ul>\n\t<li>对于&nbsp;<code>i = 0</code>&nbsp;：\n\n\t<ul>\n\t\t<li>节点 1 在时刻&nbsp;<code>t = 1</code>&nbsp;被标记，节点 2 在时刻&nbsp;<code>t = 2</code>&nbsp;被标记。</li>\n\t</ul>\n\t</li>\n\t<li>对于&nbsp;<code>i = 1</code>&nbsp;：\n\t<ul>\n\t\t<li>节点 0 在时刻&nbsp;<code>t = 2</code>&nbsp;被标记，节点 2 在时刻&nbsp;<code>t = 4</code>&nbsp;被标记。</li>\n\t</ul>\n\t</li>\n\t<li>对于&nbsp;<code>i = 2</code>&nbsp;：\n\t<ul>\n\t\t<li>节点 0 在时刻&nbsp;<code>t = 2</code>&nbsp;被标记，节点 1 在时刻&nbsp;<code>t = 3</code>&nbsp;被标记。</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges = [[0,1]]</span></p>\n\n<p><b>输出：</b>[1,2]</p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122249.png\" style=\"width: 500px; height: 257px;\" /></p>\n\n<ul>\n\t<li>对于&nbsp;<code>i = 0</code>&nbsp;：\n\n\t<ul>\n\t\t<li>节点 1 在时刻&nbsp;<code>t = 1</code>&nbsp;被标记。</li>\n\t</ul>\n\t</li>\n\t<li>对于&nbsp;<code>i = 1</code>&nbsp;：\n\t<ul>\n\t\t<li>节点 0 在时刻&nbsp;<code>t = 2</code>&nbsp;被标记。</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges = </span>[[2,4],[0,1],[2,3],[0,2]]</p>\n\n<p><b>输出：</b>[4,6,3,5,5]</p>\n\n<p><b>解释：</b></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-210550.png\" style=\"height: 266px; width: 500px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>输入保证&nbsp;<code>edges</code>&nbsp;表示一棵合法的树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3242.设计相邻元素求和服务",
        "hardRate": "EASY",
        "passRate": "84.82%",
        "problemsUrl": "https://leetcode.cn/problems/design-neighbor-sum-service/",
        "solutionsUrl": "https://leetcode.cn/problems/design-neighbor-sum-service/solution",
        "problemsDesc": "<p>给你一个 <code>n x n</code> 的二维数组 <code>grid</code>，它包含范围 <code>[0, n<sup>2</sup> - 1]</code> 内的<strong>不重复</strong>元素。</p>\n\n<p>实现 <code>neighborSum</code> 类：</p>\n\n<ul>\n\t<li><code>neighborSum(int [][]grid)</code> 初始化对象。</li>\n\t<li><code>int adjacentSum(int value)</code> 返回在 <code>grid</code> 中与 <code>value</code> 相邻的元素之<strong>和</strong>，相邻指的是与 <code>value</code> 在上、左、右或下的元素。</li>\n\t<li><code>int diagonalSum(int value)</code> 返回在 <code>grid</code> 中与 <code>value</code> 对角线相邻的元素之<strong>和</strong>，对角线相邻指的是与 <code>value</code> 在左上、右上、左下或右下的元素。</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/24/design.png\" style=\"width: 400px; height: 248px;\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong></p>\n\n<p>[\"neighborSum\", \"adjacentSum\", \"adjacentSum\", \"diagonalSum\", \"diagonalSum\"]</p>\n\n<p>[[[[0, 1, 2], [3, 4, 5], [6, 7, 8]]], [1], [4], [4], [8]]</p>\n\n<p><strong>输出：</strong> [null, 6, 16, 16, 4]</p>\n\n<p><strong>解释：</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/24/designexample0.png\" style=\"width: 250px; height: 249px;\" /></strong></p>\n\n<ul>\n\t<li>1 的相邻元素是 0、2 和 4。</li>\n\t<li>4 的相邻元素是 1、3、5 和 7。</li>\n\t<li>4 的对角线相邻元素是 0、2、6 和 8。</li>\n\t<li>8 的对角线相邻元素是 4。</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong></p>\n\n<p>[\"neighborSum\", \"adjacentSum\", \"diagonalSum\"]</p>\n\n<p>[[[[1, 2, 0, 3], [4, 7, 15, 6], [8, 9, 10, 11], [12, 13, 14, 5]]], [15], [9]]</p>\n\n<p><strong>输出：</strong> [null, 23, 45]</p>\n\n<p><strong>解释：</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/24/designexample2.png\" style=\"width: 300px; height: 300px;\" /></strong></p>\n\n<ul>\n\t<li>15 的相邻元素是 0、10、7 和 6。</li>\n\t<li>9 的对角线相邻元素是 4、12、14 和 15。</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n == grid.length == grid[0].length &lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= n<sup>2</sup> - 1</code></li>\n\t<li>所有 <code>grid[i][j]</code> 值均不重复。</li>\n\t<li><code>adjacentSum</code> 和 <code>diagonalSum</code> 中的 <code>value</code> 均在范围 <code>[0, n<sup>2</sup> - 1]</code> 内。</li>\n\t<li>最多会调用 <code>adjacentSum</code> 和 <code>diagonalSum</code> 总共 <code>2 * n<sup>2</sup></code> 次。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3243.新增道路查询后的最短距离 I",
        "hardRate": "MEDIUM",
        "passRate": "55.53%",
        "problemsUrl": "https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-i/",
        "solutionsUrl": "https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-i/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> 和一个二维整数数组 <code>queries</code>。</p>\n\n<p>有 <code>n</code> 个城市，编号从 <code>0</code> 到 <code>n - 1</code>。初始时，每个城市 <code>i</code> 都有一条<strong>单向</strong>道路通往城市 <code>i + 1</code>（ <code>0 &lt;= i &lt; n - 1</code>）。</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示新建一条从城市 <code>u<sub>i</sub></code> 到城市 <code>v<sub>i</sub></code> 的<strong>单向</strong>道路。每次查询后，你需要找到从城市 <code>0</code> 到城市 <code>n - 1</code> 的<strong>最短路径</strong>的<strong>长度</strong>。</p>\n\n<p>返回一个数组 <code>answer</code>，对于范围 <code>[0, queries.length - 1]</code> 中的每个 <code>i</code>，<code>answer[i]</code> 是处理完<strong>前</strong> <code>i + 1</code> 个查询后，从城市 <code>0</code> 到城市 <code>n - 1</code> 的最短路径的<em>长度</em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 5, queries = [[2, 4], [0, 2], [0, 4]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[3, 2, 1]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>新增一条从 2 到 4 的道路后，从 0 到 4 的最短路径长度为 3。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>新增一条从 0 到 2 的道路后，从 0 到 4 的最短路径长度为 2。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>新增一条从 0 到 4 的道路后，从 0 到 4 的最短路径长度为 1。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 4, queries = [[0, 3], [0, 2]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[1, 1]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>新增一条从 0 到 3 的道路后，从 0 到 3 的最短路径长度为 1。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>新增一条从 0 到 2 的道路后，从 0 到 3 的最短路径长度仍为 1。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n\t<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n\t<li>查询中没有重复的道路。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3244.新增道路查询后的最短距离 II",
        "hardRate": "HARD",
        "passRate": "47.63%",
        "problemsUrl": "https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-ii/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> 和一个二维整数数组 <code>queries</code>。</p>\n\n<p>有 <code>n</code> 个城市，编号从 <code>0</code> 到 <code>n - 1</code>。初始时，每个城市 <code>i</code> 都有一条<strong>单向</strong>道路通往城市 <code>i + 1</code>（ <code>0 &lt;= i &lt; n - 1</code>）。</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示新建一条从城市 <code>u<sub>i</sub></code> 到城市 <code>v<sub>i</sub></code> 的<strong>单向</strong>道路。每次查询后，你需要找到从城市 <code>0</code> 到城市 <code>n - 1</code> 的<strong>最短路径</strong>的<strong>长度</strong>。</p>\n\n<p>所有查询中不会存在两个查询都满足 <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>。</p>\n\n<p>返回一个数组 <code>answer</code>，对于范围 <code>[0, queries.length - 1]</code> 中的每个 <code>i</code>，<code>answer[i]</code> 是处理完<strong>前</strong> <code>i + 1</code> 个查询后，从城市 <code>0</code> 到城市 <code>n - 1</code> 的最短路径的<em>长度</em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 5, queries = [[2, 4], [0, 2], [0, 4]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[3, 2, 1]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>新增一条从 2 到 4 的道路后，从 0 到 4 的最短路径长度为 3。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>新增一条从 0 到 2 的道路后，从 0 到 4 的最短路径长度为 2。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>新增一条从 0 到 4 的道路后，从 0 到 4 的最短路径长度为 1。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">n = 4, queries = [[0, 3], [0, 2]]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">[1, 1]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>新增一条从 0 到 3 的道路后，从 0 到 3 的最短路径长度为 1。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>新增一条从 0 到 2 的道路后，从 0 到 3 的最短路径长度仍为 1。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n\t<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n\t<li>查询中不存在重复的道路。</li>\n\t<li>不存在两个查询都满足 <code>i != j</code> 且 <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3245.交替组 III",
        "hardRate": "HARD",
        "passRate": "25.65%",
        "problemsUrl": "https://leetcode.cn/problems/alternating-groups-iii/",
        "solutionsUrl": "https://leetcode.cn/problems/alternating-groups-iii/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>colors</code> 和一个二维整数数组 <code>queries</code> 。<code>colors</code>表示一个由红色和蓝色瓷砖组成的环，第 <code>i</code>&nbsp;块瓷砖的颜色为&nbsp;<code>colors[i]</code>&nbsp;：</p>\n\n<ul>\n\t<li><code>colors[i] == 0</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;块瓷砖的颜色是 <strong>红色</strong>&nbsp;。</li>\n\t<li><code>colors[i] == 1</code>&nbsp;表示第 <code>i</code>&nbsp;块瓷砖的颜色是 <strong>蓝色</strong>&nbsp;。</li>\n</ul>\n\n<p>环中连续若干块瓷砖的颜色如果是 <strong>交替</strong>&nbsp;颜色（也就是说这组瓷砖中除了第一块和最后一块瓷砖以外，中间瓷砖的颜色与它<strong>&nbsp;左边</strong>&nbsp;和 <strong>右边</strong>&nbsp;的颜色都不同），那么它被称为一个 <strong>交替组</strong>。</p>\n\n<p>你需要处理两种类型的查询：</p>\n\n<ul>\n\t<li><code>queries[i] = [1, size<sub>i</sub>]</code>，确定大小为<code>size<sub>i</sub></code>的<strong> </strong><strong>交替组</strong> 的数量。</li>\n\t<li><code>queries[i] = [2, index<sub>i</sub>, color<sub>i</sub>]</code>，将<code>colors[index<sub>i</sub>]</code>更改为<code>color<sub>i</sub></code>。</li>\n</ul>\n\n<p>返回数组 <code>answer</code>，数组中按顺序包含第一种类型查询的结果。</p>\n\n<p><b>注意</b>&nbsp;，由于&nbsp;<code>colors</code>&nbsp;表示一个 <strong>环</strong>&nbsp;，<strong>第一块</strong>&nbsp;瓷砖和 <strong>最后一块</strong>&nbsp;瓷砖是相邻的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">colors = [0,1,1,0,1], queries = [[2,1,0],[1,4]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">[2]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>第一次查询：</p>\n\n<p>将 <code>colors[1]</code> 改为 0。</p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-20-25.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n\n<p>第二次查询：</p>\n\n<p>统计大小为 4 的交替组的数量：</p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-25-02-2.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-24-12.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">colors = [0,0,1,0,1,1], queries = [[1,3],[2,3,0],[1,5]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">[2,0]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-35-50.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n\n<p>第一次查询：</p>\n\n<p>统计大小为 3 的交替组的数量。</p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-37-13.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-36-40.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n\n<p>第二次查询：<code>colors</code>不变。</p>\n\n<p>第三次查询：不存在大小为 5 的交替组。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= colors.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i][0] == 1</code> 或 <code>queries[i][0] == 2</code></li>\n\t<li>对于所有的<code>i</code>：\n\t<ul>\n\t\t<li><code>queries[i][0] == 1</code>： <code>queries[i].length == 2</code>, <code>3 &lt;= queries[i][1] &lt;= colors.length - 1</code></li>\n\t\t<li><code>queries[i][0] == 2</code>： <code>queries[i].length == 3</code>, <code>0 &lt;= queries[i][1] &lt;= colors.length - 1</code>, <code>0 &lt;= queries[i][2] &lt;= 1</code></li>\n\t</ul>\n\t</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3246.英超积分榜排名",
        "hardRate": "EASY",
        "passRate": "75.88%",
        "problemsUrl": "https://leetcode.cn/problems/premier-league-table-ranking/",
        "solutionsUrl": "https://leetcode.cn/problems/premier-league-table-ranking/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3247.奇数和子序列的数量",
        "hardRate": "MEDIUM",
        "passRate": "68.59%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-subsequences-with-odd-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-subsequences-with-odd-sum/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 3248.矩阵中的蛇",
        "hardRate": "EASY",
        "passRate": "89.10%",
        "problemsUrl": "https://leetcode.cn/problems/snake-in-matrix/",
        "solutionsUrl": "https://leetcode.cn/problems/snake-in-matrix/solution",
        "problemsDesc": "<p>大小为 <code>n x n</code> 的矩阵 <code>grid</code> 中有一条蛇。蛇可以朝 <strong>四个可能的方向 </strong>移动。矩阵中的每个单元格都使用位置进行标识： <code>grid[i][j] = (i * n) + j</code>。</p>\n\n<p>蛇从单元格 0 开始，并遵循一系列命令移动。</p>\n\n<p>给你一个整数 <code>n</code> 表示 <code>grid</code> 的大小，另给你一个字符串数组 <code>commands</code>，其中包括 <code>\"UP\"</code>、<code>\"RIGHT\"</code>、<code>\"DOWN\"</code> 和 <code>\"LEFT\"</code>。题目测评数据保证蛇在整个移动过程中将始终位于 <code>grid</code> 边界内。</p>\n\n<p>返回执行 <code>commands</code> 后蛇所停留的最终单元格的位置。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">n = 2, commands = [\"RIGHT\",\"DOWN\"]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">3</span></p>\n\n<p><strong>解释：</strong></p>\n\n<div style=\"display:flex; gap: 12px;\">\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">n = 3, commands = [\"DOWN\",\"RIGHT\",\"UP\"]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">1</span></p>\n\n<p><strong>解释：</strong></p>\n\n<div style=\"display:flex; gap: 12px;\">\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">3</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">4</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">6</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">7</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">3</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">4</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">6</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">7</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">3</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">4</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">6</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">7</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">3</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">4</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">6</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">7</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= commands.length &lt;= 100</code></li>\n\t<li><code>commands</code> 仅由 <code>\"UP\"</code>、<code>\"RIGHT\"</code>、<code>\"DOWN\"</code> 和 <code>\"LEFT\"</code> 组成。</li>\n\t<li>生成的测评数据确保蛇不会移动到矩阵的边界外。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3249.统计好节点的数目",
        "hardRate": "MEDIUM",
        "passRate": "58.96%",
        "problemsUrl": "https://leetcode.cn/problems/count-the-number-of-good-nodes/",
        "solutionsUrl": "https://leetcode.cn/problems/count-the-number-of-good-nodes/solution",
        "problemsDesc": "<p>现有一棵 <strong>无向</strong> 树，树中包含 <code>n</code> 个节点，按从 <code>0</code> 到 <code>n - 1</code> 标记。树的根节点是节点 <code>0</code> 。给你一个长度为 <code>n - 1</code> 的二维整数数组 <code>edges</code>，其中 <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 表示树中节点 <code>a<sub>i</sub></code> 与节点 <code>b<sub>i</sub></code> 之间存在一条边。</p>\n\n<p>如果一个节点的所有子节点为根的&nbsp;<span data-keyword=\"subtree\">子树</span>&nbsp;包含的节点数相同，则认为该节点是一个 <strong>好节点</strong>。</p>\n\n<p>返回给定树中<strong> 好节点 </strong>的数量。</p>\n\n<p><strong>子树</strong>&nbsp;指的是一个节点以及它所有后代节点构成的一棵树。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">7</span></p>\n\n<p><strong>说明：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/26/tree1.png\" style=\"width: 360px; height: 158px;\" />\n<p>树的所有节点都是好节点。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">6</span></p>\n\n<p><strong>说明：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-193552.png\" style=\"width: 360px; height: 303px;\" />\n<p>树中有 6 个好节点。上图中已将这些节点着色。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>12</span></p>\n\n<p><strong>解释：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rob.jpg\" style=\"width: 450px; height: 277px;\" />\n<p>除了节点 9 以外其他所有节点都是好节点。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li>输入确保 <code>edges</code> 总表示一棵有效的树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 3250.单调数组对的数目 I",
        "hardRate": "HARD",
        "passRate": "66.64%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-count-of-monotonic-pairs-i/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-count-of-monotonic-pairs-i/solution",
        "problemsDesc": "<p>给你一个长度为&nbsp;<code>n</code>&nbsp;的&nbsp;<strong>正</strong>&nbsp;整数数组&nbsp;<code>nums</code>&nbsp;。</p>\n\n<p>如果两个&nbsp;<strong>非负</strong>&nbsp;整数数组&nbsp;<code>(arr1, arr2)</code>&nbsp;满足以下条件，我们称它们是&nbsp;<strong>单调</strong>&nbsp;数组对：</p>\n\n<ul>\n\t<li>两个数组的长度都是&nbsp;<code>n</code>&nbsp;。</li>\n\t<li><code>arr1</code>&nbsp;是单调<strong>&nbsp;非递减</strong>&nbsp;的，换句话说&nbsp;<code>arr1[0] &lt;= arr1[1] &lt;= ... &lt;= arr1[n - 1]</code>&nbsp;。</li>\n\t<li><code>arr2</code>&nbsp;是单调 <strong>非递增</strong>&nbsp;的，换句话说&nbsp;<code>arr2[0] &gt;= arr2[1] &gt;= ... &gt;= arr2[n - 1]</code>&nbsp;。</li>\n\t<li>对于所有的&nbsp;<code>0 &lt;= i &lt;= n - 1</code>&nbsp;都有&nbsp;<code>arr1[i] + arr2[i] == nums[i]</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回所有 <strong>单调</strong>&nbsp;数组对的数目。</p>\n\n<p>由于答案可能很大，请你将它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [2,3,2]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>4</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>单调数组对包括：</p>\n\n<ol>\n\t<li><code>([0, 1, 1], [2, 2, 1])</code></li>\n\t<li><code>([0, 1, 2], [2, 2, 0])</code></li>\n\t<li><code>([0, 2, 2], [2, 1, 0])</code></li>\n\t<li><code>([1, 2, 2], [1, 1, 0])</code></li>\n</ol>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [5,5,5,5]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>126</span></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "isPlus": false
    }
]